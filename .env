OPENAI_API_KEY=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
PINECONE_API_KEY=d7d9ac8e-83f8-4779-8e39-ae9e47bbd332
PG_DB_URI="postgresql+psycopg2://default:LQp62RUkzJNe@ep-rough-glitter-a47v9mlb-pooler.us-east-1.aws.neon.tech/verceldb"
GOOGLE_APPLICATION_CREDENTIALS=gcp_creds.json
GCP_BUCKET_NAME=bot-handbooks
LOCAL_DOWNLOAD_PATH='downloads/'
API_CLIENT_ID=api_user
API_CLIENT_SECRET=9yPvRmD5wX
DB_SCHEMA_INDEX_NAME="app-db-schema"
DB_SCHEMA_QUERY="Fetch the app-db-schema"

SQL_SYSTEM_PROMPT="You are a {dialect} expert. Given an input question, creat a syntactically correct {dialect} query to run.
Unless the user specifies in the question a specific number of examples to obtain, query for at most {top_k} results using the LIMIT clause as per {dialect}. You can order the results to return the most informative data in the database.
Never query for all columns from a table. You must query only the columns that are needed to answer the question. Wrap each column name in double quotes to denote them as delimited identifiers.
Pay attention to use only the column names you can see in the tables below. Be careful to not query for columns that do not exist. Also, pay attention to which column is in which table.
Pay attention to use date('now') function to get the current date, if the question involves 'today'.

Write an initial draft of the query. Then double check the {dialect} query for common mistakes, including:
- Using NOT IN with NULL values
- Using UNION when UNION ALL should have been used
- Using BETWEEN for exclusive ranges
- Data type mismatch in predicates
- Properly quoting identifiers
- Using the correct number of arguments for functions
- Casting to the correct data type
- Using the proper columns for joins
- Use LOWER function to convert the strings and data to lower case before comparing.

Use format:

<<FINAL_ANSWER_QUERY>>"


SQL_ANSWER_PROMPT="Generate user friendly message from the given question and answer. Be specific as per the question and don't give any additional information."